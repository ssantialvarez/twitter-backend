Terminadas (+/-):
There's an unused table Follow that stores follows between users. Create a new follower domain (with it's own controller, service and repositories) that has two new endpoints POST /api/follower/follow/:user_id and POST /api/follower/unfollow/:user_id.
All users are currently public, meaning that i can see tweets from anyone, without having to follow them. Add the ability for users to have private profiles and store it in the User table. Update the GET api/post to return only posts with public account authors or private account authors that the user follows.
Update the GET api/post/:post_id and GET api/post/by_user/:user_id to throw a 404 error if the author has a private account and the user does not follow them.
Update GET api/user/me and GET api/user to return UserViewDTO.

En proceso:
Update GET api/user/:user_id to return UserViewDTO. Also return if the user follows the one making the request.
Add the ability to react to a post (like and retweet) both should be stored in the same table and using the endpoints POST api/reaction/:post_id and DELETE api/reaction/:post_id.
Users do not currently have a profile picture. Integrate with AWS S3 to store user profile pictures and post pictures. Careful! Do not receive images in your endpoints. Make use of S3 Pre-signed URLs. Update the UserDTO to include the profile image. You can use a public S3 bucket as it doesn't contain private data.

Sin Empezar:
The frontend team needs to integrate with the server, but they don't know what endpoints you have available or what they do. Document the API using Swagger
Add the ability to comment in posts, a comment should be stored as a post, but still be able to query posts and comments separately.
Create endpoints to query retweets, likes and comments by user id and put them in their respective domains.
Create endpoint GET api/comment/:post_id to get comments by post. Add Cursor Based Pagination (You can see how it works here). It should return ExtendedPostDTO and sorted by reactions.
Create endpoint GET api/user/by_username/:username to return a list of UserViewDTO of those users whose usernames are included in :username. Add pagination.
Update GET api/post and GET api/post/by_user/:user_id to return a list of ExtendedPostDTO.
Using SocketIO create an authenticated websocket to create a real-time chat between users only if they follow eachother. Also messages should be stored in the database to keep the chat history.
Search for a testing framework and create some unit tests. Make a CI/CD pipeline using github actions to run those tests.
Deploy your backend and database to a service of your preference. Here are some recommended options:

    Railway
    Fl/
    Back4app
    AWS(You need previous AWS knowledge)


